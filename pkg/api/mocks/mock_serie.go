// Code generated by MockGen. DO NOT EDIT.
// Source: serie.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/muhammedikinci/scaleapi/pkg/models"
)

// MockSerieRepository is a mock of SerieRepository interface.
type MockSerieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSerieRepositoryMockRecorder
}

// MockSerieRepositoryMockRecorder is the mock recorder for MockSerieRepository.
type MockSerieRepositoryMockRecorder struct {
	mock *MockSerieRepository
}

// NewMockSerieRepository creates a new mock instance.
func NewMockSerieRepository(ctrl *gomock.Controller) *MockSerieRepository {
	mock := &MockSerieRepository{ctrl: ctrl}
	mock.recorder = &MockSerieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerieRepository) EXPECT() *MockSerieRepositoryMockRecorder {
	return m.recorder
}

// AddSerie mocks base method.
func (m *MockSerieRepository) AddSerie(arg0 models.Serie) (models.Serie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSerie", arg0)
	ret0, _ := ret[0].(models.Serie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSerie indicates an expected call of AddSerie.
func (mr *MockSerieRepositoryMockRecorder) AddSerie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSerie", reflect.TypeOf((*MockSerieRepository)(nil).AddSerie), arg0)
}

// Filter mocks base method.
func (m *MockSerieRepository) Filter(title, genre string) ([]models.Serie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", title, genre)
	ret0, _ := ret[0].([]models.Serie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockSerieRepositoryMockRecorder) Filter(title, genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockSerieRepository)(nil).Filter), title, genre)
}

// FindById mocks base method.
func (m *MockSerieRepository) FindById(id int) (models.Serie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(models.Serie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSerieRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSerieRepository)(nil).FindById), id)
}

// GetAllSeries mocks base method.
func (m *MockSerieRepository) GetAllSeries() ([]models.Serie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSeries")
	ret0, _ := ret[0].([]models.Serie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSeries indicates an expected call of GetAllSeries.
func (mr *MockSerieRepositoryMockRecorder) GetAllSeries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSeries", reflect.TypeOf((*MockSerieRepository)(nil).GetAllSeries))
}

// RemoveSerie mocks base method.
func (m *MockSerieRepository) RemoveSerie(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSerie", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSerie indicates an expected call of RemoveSerie.
func (mr *MockSerieRepositoryMockRecorder) RemoveSerie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSerie", reflect.TypeOf((*MockSerieRepository)(nil).RemoveSerie), id)
}
