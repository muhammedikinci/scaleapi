// Code generated by MockGen. DO NOT EDIT.
// Source: episode.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/muhammedikinci/scaleapi/pkg/models"
)

// MockEpisodeRepository is a mock of EpisodeRepository interface.
type MockEpisodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEpisodeRepositoryMockRecorder
}

// MockEpisodeRepositoryMockRecorder is the mock recorder for MockEpisodeRepository.
type MockEpisodeRepositoryMockRecorder struct {
	mock *MockEpisodeRepository
}

// NewMockEpisodeRepository creates a new mock instance.
func NewMockEpisodeRepository(ctrl *gomock.Controller) *MockEpisodeRepository {
	mock := &MockEpisodeRepository{ctrl: ctrl}
	mock.recorder = &MockEpisodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpisodeRepository) EXPECT() *MockEpisodeRepositoryMockRecorder {
	return m.recorder
}

// AddEpisode mocks base method.
func (m *MockEpisodeRepository) AddEpisode(s models.Episode) (models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEpisode", s)
	ret0, _ := ret[0].(models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEpisode indicates an expected call of AddEpisode.
func (mr *MockEpisodeRepositoryMockRecorder) AddEpisode(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEpisode", reflect.TypeOf((*MockEpisodeRepository)(nil).AddEpisode), s)
}

// FindAllEpisodesInSeason mocks base method.
func (m *MockEpisodeRepository) FindAllEpisodesInSeason(serieId int) ([]models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEpisodesInSeason", serieId)
	ret0, _ := ret[0].([]models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEpisodesInSeason indicates an expected call of FindAllEpisodesInSeason.
func (mr *MockEpisodeRepositoryMockRecorder) FindAllEpisodesInSeason(serieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEpisodesInSeason", reflect.TypeOf((*MockEpisodeRepository)(nil).FindAllEpisodesInSeason), serieId)
}

// FindById mocks base method.
func (m *MockEpisodeRepository) FindById(id int) (models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockEpisodeRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockEpisodeRepository)(nil).FindById), id)
}
