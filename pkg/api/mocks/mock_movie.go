// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/muhammedikinci/scaleapi/pkg/models"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockMovieRepository) AddMovie(arg0 models.Movie) (models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovie", arg0)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockMovieRepositoryMockRecorder) AddMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockMovieRepository)(nil).AddMovie), arg0)
}

// Filter mocks base method.
func (m *MockMovieRepository) Filter(title, genre string) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", title, genre)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockMovieRepositoryMockRecorder) Filter(title, genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockMovieRepository)(nil).Filter), title, genre)
}

// FindById mocks base method.
func (m *MockMovieRepository) FindById(id int) (models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMovieRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMovieRepository)(nil).FindById), id)
}

// GetAllMovies mocks base method.
func (m *MockMovieRepository) GetAllMovies() ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies")
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovies indicates an expected call of GetAllMovies.
func (mr *MockMovieRepositoryMockRecorder) GetAllMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockMovieRepository)(nil).GetAllMovies))
}
